open import Relation.Binary.PropositionalEquality as Eq
open Eq using (_‚â°_)
open import Data.List using (List) renaming (_‚à∑_ to _,_; _‚à∑ ≥_ to _,‚Ä≤_; [] to ‚àÖ)
open import Data.List.Membership.Propositional using (_‚àà_)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Data.Bool using (Bool; false; true)
open import Data.Nat using (‚Ñï)

open import ADJ.Mode using (StructRule; Mode; rulesOf)

module ADJ.ADJE (Atoms : Set) (Terms : Set) (BotMode : Mode) (_‚â•_ : Mode ‚Üí Mode ‚Üí Set) (_‚â•?_ : (m k : Mode)  ‚Üí Dec (m ‚â• k)) where
  
  infix 30 `_
  infix 20 _‚äó_
  infix 10 _‚äï_
  infix 10 _&_
  infix 10 _‚ä∏_
  infix 10 ùüô
  

  data Prop (m : Mode) : Set where
    -- An arbitrary proposition
    `_  : (A : Atoms) ‚Üí Prop m
    -- Implication
    _‚ä∏_ : Prop m ‚Üí Prop m ‚Üí Prop m
    -- Tensor
    _‚äó_ : Prop m ‚Üí Prop m ‚Üí Prop m
    -- Unit
    ùüô : Prop m
    -- Top
    ‚ä§ : Prop m
    -- Plus - Using the binary relation rather than the n-ary version for simplicity
    _‚äï_ : Prop m ‚Üí Prop m ‚Üí Prop m
    -- With - Using the binary version rather than the n-ary version for simplicity
    _&_ : Prop m ‚Üí Prop m ‚Üí Prop m
    -- Up from l
    Up[_]_ : ‚àÄ { l : Mode } ‚Üí (m ‚â• l) ‚Üí Prop l ‚Üí Prop m
    -- Down from l
    Down[_]_ : ‚àÄ { l : Mode } ‚Üí (l ‚â• m) ‚Üí Prop l ‚Üí Prop m
    -- For all
    ‚àÄ[_] : Prop m ‚Üí Prop m

  private
    -- Example propositions
    Linear : Mode
    Linear = record { structRules = ‚àÖ }

    Unrestricted : Mode
    Unrestricted  = record { structRules = ‚àÖ }

    postulate
      A : Atoms
      B : Atoms

      U‚â•L : Unrestricted ‚â• Linear

    A‚Çó : Prop Linear
    A‚Çó = ` A
    B‚Çó : Prop Linear
    B‚Çó = ` B

    LinearProp : Prop Linear
    LinearProp = A‚Çó ‚ä∏ B‚Çó

    UnrestrictedProp : Prop Unrestricted
    UnrestrictedProp = Up[ U‚â•L ] LinearProp

    DownshiftedProp : Prop Linear
    DownshiftedProp = Down[ U‚â•L ] UnrestrictedProp

  -- Introducing the HProp as a wrapper for moded propositions to allow for lists
  -- of propositions with heterogenous modes
  data HProp : Set where
    `_ : ‚àÄ { m : Mode } ‚Üí Prop m ‚Üí HProp
  
  infixr 5 _,_
  data Context : Set where
    ‚àÖ : Context
    _,_ : ‚àÄ { m } ‚Üí Context ‚Üí Prop m ‚Üí Context

  -- Concatenating contexts
  _++_ : Context ‚Üí Context ‚Üí Context
  ‚àÖ ++ R = R
  (L , x) ++ R = L ++ (R , x)

  toHProps : ‚àÄ { m } ‚Üí List (Prop m) ‚Üí List (HProp)
  toHProps ‚àÖ = ‚àÖ
  toHProps (x , xs) = ` x ,  (toHProps xs)

  private
    {-
      Defining some side functions that we'll need for our logical rules.
    -}
    _‚â°?_ : StructRule ‚Üí StructRule ‚Üí Bool
    StructRule.W ‚â°? StructRule.W = true
    StructRule.C ‚â°? StructRule.C = true
    StructRule.W ‚â°? StructRule.C = false
    StructRule.C ‚â°? StructRule.W = false 

    _‚àà?_ : StructRule ‚Üí List StructRule ‚Üí Bool
    x ‚àà? ‚àÖ = false
    x ‚àà? (y , xs) with (x ‚â°? y)
    ... | true = true
    ... | false = x ‚àà? xs

    _‚à©_ : List StructRule ‚Üí List StructRule ‚Üí List StructRule
    ‚àÖ ‚à© _ = ‚àÖ
    _ ‚à© ‚àÖ = ‚àÖ
    (l , L) ‚à© R with (l ‚àà? R)
    ... | true = (l , L ‚à© R)
    ... | false = (L ‚à© R)

  -- Helper function for extracting the mode of a proposition
  modeOf : ‚àÄ { m : Mode } ‚Üí Prop m ‚Üí Mode
  modeOf { m } A = m

  -- Sigma of a list of propositions extracts the common structural rules of those propositions
  œÉ : Context ‚Üí List StructRule
  œÉ ‚àÖ = StructRule.W , StructRule.C , ‚àÖ
  œÉ (As , A) = (rulesOf (modeOf A)) ‚à© (œÉ As)
  
  infix 5 _‚ä¢_

  leastModeOf : Context ‚Üí Mode ‚Üí Mode
  leastModeOf ‚àÖ m = m
  leastModeOf (Œ® , A) m with modeOf A ‚â•? m
  ... | yes _ = leastModeOf Œ® m
  ... | no _ = leastModeOf Œ® (modeOf A)
    
  -- Definition for comparing a mode to all modes of a list of propositions

  data _‚â•À°_ : ‚àÄ (Œ® : Context) (k : Mode) ‚Üí Set where
    ‚àÖ‚â•k : ‚àÄ { k : Mode }
        ---------------------
        ‚Üí ‚àÖ ‚â•À° k

    P‚â•k : ‚àÄ { m : Mode } { B : Prop m } { Œ® : Context } { k : Mode }
      ‚Üí (leastModeOf Œ® BotMode) ‚â• k 
      ------------------------------
      ‚Üí Œ® ‚â•À° k

  {-
    Finally, the rules
  -}
  data _‚ä¢_ : ‚àÄ {m : Mode} (Œ® : Context) ‚Üí Prop m ‚Üí Set where
    {- Axiom -}
    id : ‚àÄ {m : Mode} { A : Prop m }
        ------------------------------
        ‚Üí (‚àÖ , A) ‚ä¢ A

    {- Cut -}
    cut : ‚àÄ {m k l : Mode} { Œ®‚ÇÅ Œ®‚ÇÇ : Context } {C‚Çñ : Prop k} { A‚Çò : Prop m }
        ‚Üí Œ®‚ÇÅ ‚â•À° m ‚Üí m ‚â• k     ‚Üí   Œ®‚ÇÅ ‚ä¢ A‚Çò   ‚Üí (Œ®‚ÇÇ , A‚Çò) ‚ä¢ C‚Çñ 
        -------------------------------------------------------
        ‚Üí (Œ®‚ÇÅ ++ Œ®‚ÇÇ) ‚ä¢ C‚Çñ

    {- Structural Rules -}
    weaken : ‚àÄ { m k : Mode } { Œ® : Context } { C‚Çñ : Prop k } { A‚Çò : Prop m }
        ‚Üí StructRule.W ‚àà (rulesOf m)    ‚Üí   Œ® ‚ä¢ C‚Çñ
        ---------------------------------------------
        ‚Üí (Œ® , A‚Çò) ‚ä¢ C‚Çñ

    contract : ‚àÄ { m k : Mode } { Œ® : Context } { C‚Çñ : Prop k } { A‚Çò : Prop m }
        ‚Üí StructRule.C ‚àà (rulesOf m)  ‚Üí ((Œ® , A‚Çò) , A‚Çò) ‚ä¢ C‚Çñ
        -----------------------------------------------------------
        ‚Üí (Œ® , A‚Çò) ‚ä¢ C‚Çñ

    -- Exchange isn't included in the ADJ paper, and instead is left as implicitly admitted.
    -- Writing it in the style of Abramsky's Computational interpretations of linear logic, where we are
    -- exchanging propositions. This is in contrast to Wen Kokke's model of intuitionistic logic, where
    -- she exchanges whole pieces of context.
    exchange : ‚àÄ { m k l : Mode } { Œ®‚ÇÅ Œ®‚ÇÇ : Context } { A‚Çò : Prop m } { B‚Çó : Prop l } { C‚Çñ : Prop k }
        ‚Üí ((Œ®‚ÇÅ , A‚Çò) ++ (Œ®‚ÇÇ , B‚Çó)) ‚ä¢ C‚Çñ
        ------------------------------------
        ‚Üí ((Œ®‚ÇÅ ,  B‚Çó) ++ (Œ®‚ÇÇ , A‚Çò)) ‚ä¢ C‚Çñ
    
    -- -- Oplus
    ‚äïR‚ÇÅ : ‚àÄ { m : Mode } { Œ® : Context } { A‚Çò : Prop m } { B‚Çò : Prop m }
        ‚Üí Œ® ‚ä¢ A‚Çò
        ---------------
        ‚Üí Œ® ‚ä¢ A‚Çò ‚äï B‚Çò

    ‚äïR‚ÇÇ : ‚àÄ { m : Mode } { Œ® : Context } { A‚Çò : Prop m } { B‚Çò : Prop m }
        ‚Üí Œ® ‚ä¢ B‚Çò
        ---------------
        ‚Üí Œ® ‚ä¢ A‚Çò ‚äï B‚Çò
    
    ‚äïL : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò : Prop m } { B‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí (Œ® , A‚Çò) ‚ä¢ C‚Çñ   ‚Üí   (Œ® , B‚Çò) ‚ä¢ C‚Çñ
        -----------------------------------------
        ‚Üí (Œ® , A‚Çò ‚äï B‚Çò) ‚ä¢ C‚Çñ 

    -- -- With
    &R : ‚àÄ { m : Mode } { Œ® : Context } { A‚Çò B‚Çò : Prop m }
        ‚Üí Œ® ‚ä¢ A‚Çò    ‚Üí   Œ® ‚ä¢ B‚Çò
        ------------------------
        ‚Üí Œ® ‚ä¢ A‚Çò & B‚Çò

    &L‚ÇÅ : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò B‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí (Œ® , A‚Çò) ‚ä¢ C‚Çñ
        --------------
        ‚Üí (Œ® , (A‚Çò & B‚Çò)) ‚ä¢ C‚Çñ

    &L‚ÇÇ : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò B‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí (Œ® , B‚Çò) ‚ä¢ C‚Çñ
        --------------
        ‚Üí (Œ® , (A‚Çò & B‚Çò)) ‚ä¢ C‚Çñ 
    -- -- Tensor
    ‚äóR : ‚àÄ { m : Mode } { Œ®‚ÇÅ Œ®‚ÇÇ : Context } { A‚Çò B‚Çò : Prop m }
        ‚Üí Œ®‚ÇÅ ‚ä¢ A‚Çò   ‚Üí   Œ®‚ÇÇ ‚ä¢ B‚Çò
        -------------------------
        ‚Üí (Œ®‚ÇÅ ++ Œ®‚ÇÇ) ‚ä¢ A‚Çò ‚äó B‚Çò

    ‚äóL : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò B‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí ((Œ® , A‚Çò ), B‚Çò ) ‚ä¢ C‚Çñ
        --------------------------
        ‚Üí (Œ® , (A‚Çò ‚äó B‚Çò)) ‚ä¢ C‚Çñ
    -- -- Lolli
    ‚ä∏R : ‚àÄ { m : Mode } { Œ® : Context } { A‚Çò B‚Çò : Prop m }
        ‚Üí (Œ® , A‚Çò) ‚ä¢ B‚Çò
        --------------------
        ‚Üí Œ® ‚ä¢ A‚Çò ‚ä∏ B‚Çò

    ‚ä∏L : ‚àÄ { m k : Mode } { Œ®‚ÇÅ Œ®‚ÇÇ : Context } { A‚Çò B‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí Œ®‚ÇÅ ‚ä¢ A‚Çò   ‚Üí   (Œ®‚ÇÇ , B‚Çò) ‚ä¢ C‚Çñ
        ----------------------------------
        ‚Üí ((Œ®‚ÇÅ ++ Œ®‚ÇÇ) , (A‚Çò ‚ä∏ B‚Çò)) ‚ä¢ C‚Çñ

    -- Top - no left rule for top
    ‚ä§R : ‚àÄ { m : Mode } { Œ® : Context }
        ------------------
        ‚Üí Œ® ‚ä¢ ‚ä§ { m } 

    -- -- Multiplicative unit
    ùüôR : ‚àÄ { m : Mode } { Œ® : Context }
        ‚Üí StructRule.W ‚àà œÉ(Œ®)
        -----------------------
        ‚Üí Œ® ‚ä¢ ùüô {m}

    ùüôL : ‚àÄ { m k : Mode } { Œ® : Context } { C‚Çñ : Prop k }
        ‚Üí Œ® ‚ä¢ C‚Çñ
        ----------
        ‚Üí (Œ® , ùüô {m}) ‚ä¢ C‚Çñ 

    -- -- Down shift
    DownR : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò : Prop m } { m‚â•k : m ‚â• k }
        ‚Üí Œ® ‚â•À° m    ‚Üí   Œ® ‚ä¢ A‚Çò
        -----------------------
        ‚Üí Œ® ‚ä¢ Down[ m‚â•k ] A‚Çò
    
    DownL : ‚àÄ { m l k : Mode } { Œ® : Context } { A‚Çò : Prop m } { C‚Çó : Prop l } { m‚â•k : m ‚â• k }
        ‚Üí (Œ® , A‚Çò) ‚ä¢ C‚Çó 
        ------------------
        ‚Üí (Œ® , Down[ m‚â•k ] A‚Çò) ‚ä¢ C‚Çó
    -- -- Up shift
    UpR : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çñ : Prop k } { m‚â•k : m ‚â• k }
        ‚Üí Œ® ‚ä¢ A‚Çñ
        -----------
        ‚Üí Œ® ‚ä¢ Up[ m‚â•k ] A‚Çñ

    UpL : ‚àÄ { m k l : Mode } { Œ® : Context } { A‚Çñ : Prop k } { C‚Çó : Prop l } { m‚â•k : m ‚â• k }
        ‚Üí k ‚â• l         ‚Üí       (Œ® , A‚Çñ) ‚ä¢ C‚Çó
        ----------------------------------------
        ‚Üí (Œ® , Up[ m‚â•k ] A‚Çñ) ‚ä¢ C‚Çó  

    -- For all rules taken from Frank Pfenning's notes on sequent calculus: https://www.cs.cmu.edu/~fp/courses/atp/handouts/ch3-seqcalc.pdf
    -- Note: Not too sure on allR
    ‚àÄR : ‚àÄ { m : Mode } { Œ® : Context } { A‚Çò : Prop m }
        ‚Üí (substitution : Prop m ‚Üí Prop m)
        ‚Üí Œ® ‚ä¢ substitution A‚Çò
        -----------------
        ‚Üí Œ® ‚ä¢ ‚àÄ[ A‚Çò ]

    -- We encode two versions of for all: one where the proposition being eliminated is weakenable and one where it is not.
    ‚àÄL‚ÇÅ : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí (substitution : Terms ‚Üí Prop m ‚Üí Prop m)
        ‚Üí (t : Terms)
        ‚Üí (Œ® , (substitution t A‚Çò)) ‚ä¢ C‚Çñ
        --------------------------
        ‚Üí (Œ® , ‚àÄ[ A‚Çò ]) ‚ä¢ C‚Çñ

    ‚àÄL‚ÇÇ : ‚àÄ { m k : Mode } { Œ® : Context } { A‚Çò : Prop m } { C‚Çñ : Prop k }
        ‚Üí (substitution : Terms ‚Üí Prop m ‚Üí Prop m)
        ‚Üí (t : Terms)
        ‚Üí StructRule.W ‚àà rulesOf (modeOf (‚àÄ[ A‚Çò ]))
        ‚Üí ((Œ® , ‚àÄ[ A‚Çò ]) , (substitution t A‚Çò)) ‚ä¢ C‚Çñ
        ----------------------------------------------
        ‚Üí (Œ® , (‚àÄ[ A‚Çò ])) ‚ä¢ C‚Çñ
        
